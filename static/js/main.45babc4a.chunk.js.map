{"version":3,"sources":["styles/opacity.ts","lib/portColor.ts","lib/stats/definitions/firstBlood.ts","lib/stats/definitions/lCancelAccuracy.ts","lib/stats/definitions/neutralOpenerMoves.ts","lib/stats/definitions/killMoves.ts","lib/stats/definitions/selfDestructs.ts","lib/exists.ts","lib/stats/definitions/highestDamagePunish.ts","lib/stats/definitions/highestDamageCombo.ts","lib/stats/definitions/averageTimeToKill.ts","lib/stats/definitions/index.js","lib/stats/compute.ts","lib/stats/params.ts","lib/stats/filterGames.js","lib/readFile.ts","containers/StatOptions/index.tsx","styles/images/powered-by.png","containers/StatOptions/Option.tsx","containers/StatOptions/StatOptionItem.tsx","containers/StatOptions/StatOptionList.tsx","lib/demo.ts","styles/theme.tsx","lib/searchParams.ts","views/RandomView.tsx","store/reducers.ts","store/context.tsx","components/DropPad.tsx","components/ErrorMessage.tsx","lib/resources.ts","components/FileList/FileItem.tsx","components/FileList/index.tsx","containers/FileListInput.tsx","lib/hooks/useParam.ts","containers/StatDisplay/StatDisplayItem.tsx","components/Stat.tsx","containers/StatDisplay/Statistic.tsx","containers/StatDisplay/StatDisplayList.tsx","containers/RenderDisplay.tsx","views/MainView.tsx","components/ExternalLink.tsx","components/Header.tsx","views/RenderView.tsx","App.tsx","serviceWorker.ts","index.tsx","lib/util.ts","components/Buttons.tsx","lib/stats/types.ts","lib/winner.ts"],"names":["hasOpacity","initial","final","transition","css","PortColor","getPortColor","portNumber","P1","P2","P3","P4","firstBlood","name","type","betterDirection","recommendedRounding","calculate","games","playerIndex","firstBloodStocks","map","game","i","deathStocks","stats","stocks","filter","stock","endPercent","firstStock","_","orderBy","ratio","reduce","count","item","length","result","simple","text","isNaN","toFixed","this","number","lCancelAccuracy","totalLCancels","actionCounts","find","counts","lCancelCount","success","fail","tally","val","neutralOpenerMoves","neutralMoves","flatMap","conversions","get","conversion","isForPlayer","lastHitBy","isNeutralWin","openingType","moves","neutralMovesByMove","groupBy","neutralMoveCounts","move","first","moveId","id","moveUtil","getMoveName","shortName","getMoveShortName","orderedNeutralMoveCounts","topNeutralMove","simpleText","toUpperCase","killMoves","didKill","last","killMovesByMove","killMoveCounts","orderedKillMoveCounts","topKillMove","selfDestructs","sdCounts","playerEndedStocks","isPlayer","hasEndPercent","oppKillConversions","isOpp","sdSum","sum","exists","value","highDamagePunishes","punishes","getDamageDone","punish","startPercent","orderedPunishes","topPunish","take","highDamageCombos","combos","combosPerGame","combo","orderedCombos","topCombo","averageTimeToKill","oppStocks","total","sumBy","require","openingsPerKill","genOverallRatioStat","damagePerOpening","neutralWins","earlyKills","orderedOppStocks","earliestKillStock","lateDeaths","playerStocks","orderedPlayerStocks","latestDeathStock","inputsPerMinute","averageKillPercent","genSimpleFromRatio","damageDone","field","fixedNum","statRatios","overallStats","keyBy","avg","averageRatios","ratios","STAT_DEFINITIONS","Map","computeStats","statsList","firstGame","orderIndices","settings","players","indices","chain","clone","reverse","statKey","def","output","results","iIndices","port","generateGameInfo","orderedGames","metadata","startAt","getResultForPlayer","gameEnd","gameEndMethod","lrasInitiatorIndex","latestFrame","findWinner","playerInfoGen","player","characterName","characterId","characterUtil","getCharacterName","characterColor","getCharacterColorName","nametag","gameResult","generatePlayerInfo","stage","stageId","stageUtil","getStageName","startTime","duration","convertFrameCountToDurationString","lastFrame","set","Stat","OPENINGS_PER_KILL","DAMAGE_PER_OPENING","NEUTRAL_WINS","KILL_MOVES","NEUTRAL_OPENER_MOVES","FIRST_BLOOD","L_CANCEL","EARLY_KILLS","LATE_DEATHS","SELF_DESTRUCTS","INPUTS_PER_MINUTE","AVG_KILL_PERCENT","AVG_TIME_TO_KILL","HIGH_DAMAGE_PUNISHES","HIGH_DAMAGE_COMBOS","DAMAGE_DONE","extractNameAndCode","playerPort","details","index","playerTag","netplayName","generateStatParams","gameDetails","filtered","gamesByIsSingles","nonSinglesGames","some","console","log","forEach","filePath","singlesGames","gamesByPorts","ports","join","gamesWithSamePorts","shift","flatGames","flatten","isEmpty","Error","filterGames","summary","generateOutput","err","error","params","lastGame","leftPlayer","rightPlayer","leftColor","rightColor","leftPort","rightPort","char1","char2","color1","color2","lastGameDetails","leftTag","leftCode","rightTag","rightCode","name1","name2","sub1","sub2","gt","gameKey","gameDuration","playerInfo","p","gameValue","s","readFileAsGameDetails","file","a","readFileAsSlippiGame","generateGameDetails","readFileAsArrayBuffer","data","arr","Int8Array","buf","Buffer","from","SlippiGame","getSettings","getStats","getMetadata","frames","getFrames","getLatestFrame","getGameEnd","Promise","resolve","reject","fr","FileReader","onabort","onerror","readAsBinaryString","addEventListener","string","resultString","Uint8Array","charCodeAt","buffer","readAsArrayBuffer","StatOptions","props","align","onClick","onClose","onChange","color","hideReset","onReset","module","exports","Outer","styled","div","checked","isDragging","Option","draggable","handleProps","rest","children","className","xmlns","width","height","viewBox","d","fill","StatOptionItem","stat","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","StatOptionList","statOptions","onDragEnd","destination","source","droppableId","newArray","reorder","droppableProps","option","key","statId","enabled","optionIndex","findIndex","o","newOptions","Array","toggle","placeholder","LEGAL_STAGE_IDS","Stage","FOUNTAIN_OF_DREAMS","POKEMON_STADIUM","YOSHIS_STORY","DREAMLAND","BATTLEFIELD","FINAL_DESTINATION","getRandomArbitrary","min","max","Math","random","getRandomInt","ceil","floor","generateDemoValues","paramMap","generateRandomCharacter","totalGames","sampleSize","leftWillWin","playerInfos","undefined","stageIndex","generateRandomStageId","generateRandomDuration","generateRandomGame","demoStats","Boolean","generateRandomMove","toString","generateRandomStat","charId","charInfo","getCharacterInfo","colorIndex","colors","defaultTheme","primaryColor","secondaryColor","generateSearchParams","restoredParams","keys","res","localStorage","getItem","getStoredValues","URLSearchParams","Types","RandomView","search","to","pathname","initialState","files","AppContext","createContext","state","dispatch","mainReducer","action","SET_DETAILS","payload","filename","fileToReplace","f","loading","SET_ERROR","ADD_FILES","currentFiles","newFiles","existingFile","REMOVE_FILE","CLEAR_ALL","reducer","AppProvider","useReducer","Provider","Container","DropPad","useDropzone","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","ErrorMessage","sanitize","replacement","toLowerCase","replace","getCharacterFolderFromId","character","charFolder","colorFolder","process","getCharacterFolderFromName","BasicFileItem","onRemove","title","CharacterIcon","winner","src","folder","getCharacterStockIcon","style","alt","FileItem","message","stageName","frame","winnerIndex","icons","FileList","timer","ALL_STATS","DEFAULT_STATS","getDefaultStats","current","validateStatOptions","newItems","currentItems","c","includes","generateStatsList","options","FileListInput","history","useHistory","useContext","React","useState","setError","showOptions","setShowOptions","defaultStats","statsModified","restoredStatsString","JSON","stringify","parse","setStatOptions","onStatOptionChange","setItem","fadeLoop","element","display","classList","add","setTimeout","remove","nextSibling","nextElementSibling","document","getElementById","resetHud","clearTimeout","welcomeMessage","onDrop","useCallback","acceptedFiles","Date","getTime","promises","all","then","time","finishedProcessing","buttonText","accept","push","disabled","useParam","defaultValue","setValue","location","useLocation","useEffect","currentValue","setParam","StatDisplayItem","StatLabel","StatContent","OuterStat","label","backgroundColor","leftComponent","rightComponent","defaultProps","NumberStat","TextStat","ConnectedNumberStat","param1","param2","field1","field2","ConnectedTextStat","Statistic","theme","statInfo","StatDisplayList","setStats","split","items","setItems","hasItem","RenderDisplay","MainView","ExternalLink","target","rel","Header","h1","RenderView","showSlippiLogo","href","poweredByImage","Settings","Fragment","styles","hot","basename","exact","path","component","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","frameCount","totalFrames","moment","utc","as","format","list","startIndex","endIndex","splice","removed","ControlsButton","button","ResetButton","SecondaryButton","alignment","Object","post","b","stocksRemaining","percent"],"mappings":"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","file":"static/js/main.45babc4a.chunk.js","sourcesContent":["import { css } from \"@emotion/core\";\n\nexport const hasOpacity = (initial: number, final = 1, transition = \"opacity 0.2s ease-in-out\") => css`\n  opacity: ${initial};\n  transition: ${transition};\n  &:hover {\n    opacity: ${final};\n  }\n`;\n","export enum PortColor {\n  P1 = \"#f52e2e\",\n  P2 = \"#5463ff\",\n  P3 = \"#ffc717\",\n  P4 = \"#1f9e40\",\n}\n\nexport function getPortColor(portNumber: number): string {\n  switch (portNumber) {\n    case 1:\n      return PortColor.P1;\n    case 2:\n      return PortColor.P2;\n    case 3:\n      return PortColor.P3;\n    case 4:\n      return PortColor.P4;\n    default:\n      return PortColor.P1;\n  }\n}\n","import _ from \"lodash\";\n\nimport { StatDefinition } from \"../types\";\n\nexport const firstBlood: StatDefinition = {\n  name: \"First Blood\",\n  type: \"number\",\n  betterDirection: \"higher\",\n  recommendedRounding: 0,\n  calculate(games, playerIndex) {\n    // For each game return either the first blood stock if taken or null if lost\n    const firstBloodStocks = games.map((game, i) => {\n      const deathStocks = game.stats.stocks.filter((stock) => {\n        const hasEndPercent = stock.endPercent !== null;\n        return hasEndPercent;\n      });\n      const orderedDeathStocks = _.orderBy(deathStocks, [\"endFrame\"], [\"asc\"]);\n      const firstStock = orderedDeathStocks[0];\n      if (!firstStock || firstStock.playerIndex === playerIndex) {\n        // console.log(`player ${playerIndex} did not draw first blood in game ${i + 1}`);\n        return null;\n      }\n      return firstStock;\n    });\n    const firstBloodCount = firstBloodStocks.reduce((count, item) => (item !== null ? count + 1 : count), 0);\n    const ratio = firstBloodCount / firstBloodStocks.length;\n\n    const simple = {\n      text: isNaN(ratio) ? \"N/A\" : `${(ratio * 100).toFixed(this.recommendedRounding)}%`,\n      number: ratio,\n    };\n\n    return {\n      result: firstBloodStocks,\n      simple,\n    };\n  },\n};\n","import { StatDefinition } from \"../types\";\n\nexport const lCancelAccuracy: StatDefinition = {\n  name: \"L-Cancel Accuracy\",\n  type: \"number\",\n  betterDirection: \"higher\",\n  recommendedRounding: 0,\n  calculate(games, playerIndex) {\n    const lCancelsPerGame = games.map((game) => {\n      const actionCounts = game.stats.actionCounts.find((counts) => counts.playerIndex === playerIndex);\n      if (!actionCounts) {\n        return {\n          success: 0,\n          fail: 0,\n        };\n      }\n\n      return actionCounts.lCancelCount;\n    });\n\n    const totalLCancels = lCancelsPerGame.reduce(\n      (tally, val) => ({\n        success: tally.success + val.success,\n        fail: tally.fail + val.fail,\n      }),\n      { success: 0, fail: 0 }\n    );\n    const ratio = totalLCancels.success / (totalLCancels.success + totalLCancels.fail);\n\n    return {\n      result: totalLCancels,\n      simple: {\n        text: isNaN(ratio) ? \"N/A\" : `${(ratio * 100).toFixed(this.recommendedRounding)}%`,\n        number: ratio,\n      },\n    };\n  },\n};\n","import { moves as moveUtil } from \"@slippi/slippi-js\";\nimport _ from \"lodash\";\n\nimport { StatDefinition } from \"../types\";\n\nexport const neutralOpenerMoves: StatDefinition = {\n  name: \"Most Common Neutral Opener\",\n  type: \"text\",\n  calculate(games, playerIndex) {\n    const neutralMoves = _.flatMap(games, (game) => {\n      const conversions = _.get(game, [\"stats\", \"conversions\"]) ?? [];\n      const conversionsForPlayer = _.filter(conversions, (conversion) => {\n        const isForPlayer = conversion.lastHitBy === playerIndex;\n        const isNeutralWin = conversion.openingType === \"neutral-win\";\n        return isForPlayer && isNeutralWin;\n      });\n\n      return conversionsForPlayer.filter(({ moves }) => moves.length > 0).map((conversion) => conversion.moves[0]);\n    });\n\n    // TODO: This following code is repeated from kill move code, put in function\n    const neutralMovesByMove = _.groupBy(neutralMoves, \"moveId\");\n    const neutralMoveCounts = _.map(neutralMovesByMove, (moves) => {\n      const move = _.first(moves);\n      const moveId = move ? move.moveId : -1;\n      return {\n        count: moves.length,\n        id: moveId,\n        name: moveUtil.getMoveName(moveId),\n        shortName: moveUtil.getMoveShortName(moveId),\n      };\n    });\n\n    const orderedNeutralMoveCounts = _.orderBy(neutralMoveCounts, [\"count\"], [\"desc\"]);\n    const topNeutralMove = _.first(orderedNeutralMoveCounts);\n    let simpleText = \"N/A\";\n    if (topNeutralMove) {\n      simpleText = `${topNeutralMove.shortName} - ${topNeutralMove.count}`;\n    }\n\n    return {\n      result: orderedNeutralMoveCounts,\n      simple: {\n        text: simpleText.toUpperCase(),\n      },\n    };\n  },\n};\n","import { moves as moveUtil } from \"@slippi/slippi-js\";\nimport _ from \"lodash\";\n\nimport { StatDefinition } from \"../types\";\n\nexport const killMoves: StatDefinition = {\n  name: \"Most Common Kill Move\",\n  type: \"text\",\n  calculate(games, playerIndex) {\n    const killMoves = _.flatMap(games, (game) => {\n      const conversions = _.get(game, [\"stats\", \"conversions\"]) || [];\n      const conversionsForPlayer = _.filter(conversions, (conversion) => {\n        const isForPlayer = conversion.lastHitBy === playerIndex;\n        const didKill = conversion.didKill;\n        return isForPlayer && didKill;\n      });\n\n      return conversionsForPlayer.map((conversion) => _.last(conversion.moves));\n    });\n\n    const killMovesByMove = _.groupBy(killMoves, \"moveId\");\n    const killMoveCounts = _.map(killMovesByMove, (moves) => {\n      const move = moves[0];\n      if (move) {\n        return {\n          count: moves.length,\n          id: move.moveId,\n          name: moveUtil.getMoveName(move.moveId),\n          shortName: moveUtil.getMoveShortName(move.moveId),\n        };\n      }\n\n      // Move is undefined so apparently this means it was a grab release??\n      return {\n        count: moves.length,\n        id: -1,\n        name: \"Grab Release\",\n        shortName: \"grab release\",\n      };\n    });\n\n    const orderedKillMoveCounts = _.orderBy(killMoveCounts, [\"count\"], [\"desc\"]);\n    const topKillMove = _.first(orderedKillMoveCounts);\n    let simpleText = \"N/A\";\n    if (topKillMove) {\n      simpleText = `${topKillMove.shortName} - ${topKillMove.count}`;\n    }\n\n    return {\n      result: orderedKillMoveCounts,\n      simple: {\n        text: simpleText.toUpperCase(),\n      },\n    };\n  },\n};\n","import _ from \"lodash\";\n\nimport { StatDefinition } from \"../types\";\n\nexport const selfDestructs: StatDefinition = {\n  // Only show this one if greater than 2 for one player\n  name: \"Total Self-Destructs\",\n  type: \"number\",\n  betterDirection: \"lower\",\n  recommendedRounding: 0,\n  calculate(games, playerIndex) {\n    const sdCounts = _.map(games, (game) => {\n      const stocks = _.get(game, [\"stats\", \"stocks\"]) || [];\n      const playerEndedStocks = _.filter(stocks, (stock) => {\n        const isPlayer = stock.playerIndex === playerIndex;\n        const hasEndPercent = stock.endPercent !== null;\n        return isPlayer && hasEndPercent;\n      });\n\n      const conversions = _.get(game, [\"stats\", \"conversions\"]) || [];\n      const oppKillConversions = _.filter(conversions, (conversion) => {\n        const isOpp = conversion.playerIndex === playerIndex;\n        const didKill = conversion.didKill;\n        return isOpp && didKill;\n      });\n\n      return playerEndedStocks.length - oppKillConversions.length;\n    });\n\n    const sdSum = _.sum(sdCounts);\n\n    return {\n      result: sdSum,\n      simple: {\n        number: sdSum,\n        text: `${sdSum}`,\n      },\n    };\n  },\n};\n","// Based on https://github.com/wilsonzlin/edgesearch/blob/d03816dd4b18d3d2eb6d08cb1ae14f96f046141d/demo/wiki/client/src/util/util.ts\n\n// Ensures value is not null or undefined.\n// != does no type validation so we don't need to explcitly check for undefined.\nexport function exists<T>(value: T | null | undefined): value is T {\n  return value != null;\n}\n","import { ConversionType } from \"@slippi/slippi-js\";\nimport { exists } from \"lib/exists\";\nimport _ from \"lodash\";\n\nimport { StatDefinition } from \"../types\";\n\nexport const highDamagePunishes: StatDefinition = {\n  name: \"Highest Damage Punish\",\n  type: \"number\",\n  betterDirection: \"higher\",\n  recommendedRounding: 1,\n  calculate(games, playerIndex) {\n    const punishes = _.flatMap(games, (game) => {\n      const conversions = _.get(game, [\"stats\", \"conversions\"]) || [];\n      return _.filter(conversions, (conversion) => {\n        const isForPlayer = conversion.playerIndex !== playerIndex;\n        const hasEndPercent = conversion.endPercent !== null;\n        return isForPlayer && hasEndPercent;\n      });\n    });\n\n    const getDamageDone = (punish: ConversionType) => {\n      if (exists(punish.endPercent)) {\n        return punish.endPercent - punish.startPercent;\n      }\n      return 0;\n    };\n\n    const orderedPunishes = _.orderBy(punishes, [getDamageDone], \"desc\");\n    const topPunish = _.first(orderedPunishes);\n    const simple = {\n      text: \"N/A\",\n      number: null as number | null,\n    };\n\n    if (topPunish) {\n      simple.number = getDamageDone(topPunish);\n      simple.text = simple.number.toFixed(this.recommendedRounding);\n    }\n\n    return {\n      result: _.take(orderedPunishes, 5),\n      simple: simple,\n    };\n  },\n};\n","import { ComboType } from \"@slippi/slippi-js\";\nimport { exists } from \"lib/exists\";\nimport _ from \"lodash\";\n\nimport { StatDefinition } from \"../types\";\n\nexport const highDamageCombos: StatDefinition = {\n  name: \"Highest Damage Combo\",\n  type: \"number\",\n  betterDirection: \"higher\",\n  recommendedRounding: 1,\n  calculate(games, playerIndex) {\n    const combos = _.flatMap(games, (game) => {\n      const combosPerGame = _.get(game, [\"stats\", \"combos\"]) || [];\n      return _.filter(combosPerGame, (combo) => {\n        const isForPlayer = combo.playerIndex !== playerIndex;\n        const hasEndPercent = combo.endPercent !== null;\n        return isForPlayer && hasEndPercent;\n      });\n    });\n\n    const getDamageDone = (combo: ComboType) => {\n      if (exists(combo.endPercent)) {\n        return combo.endPercent - combo.startPercent;\n      }\n      return 0;\n    };\n\n    const orderedCombos = _.orderBy(combos, [getDamageDone], \"desc\");\n    const topCombo = _.first(orderedCombos);\n    const simple = {\n      text: \"N/A\",\n      number: null as number | null,\n    };\n\n    if (topCombo) {\n      simple.number = getDamageDone(topCombo);\n      simple.text = simple.number.toFixed(this.recommendedRounding);\n    }\n\n    return {\n      result: _.take(orderedCombos, 5),\n      simple: simple,\n    };\n  },\n};\n","import _ from \"lodash\";\n\nimport { StatDefinition } from \"../types\";\n\nexport const averageTimeToKill: StatDefinition = {\n  name: \"Average Time to Kill\",\n  type: \"number\",\n  betterDirection: \"higher\",\n  recommendedRounding: 1,\n  calculate(games, playerIndex) {\n    const oppStocks = _.flatMap(games, (game) => {\n      const stocks = _.get(game, [\"stats\", \"stocks\"]) || [];\n      return _.filter(stocks, (stock) => {\n        const isOpp = stock.playerIndex !== playerIndex;\n        const hasEndPercent = stock.endPercent !== null;\n        return isOpp && hasEndPercent;\n      });\n    });\n\n    const result = {\n      total: oppStocks.length,\n      count: _.sumBy(oppStocks, \"endFrame\") - _.sumBy(oppStocks, \"startFrame\") || 0,\n      ratio: null as number | null,\n    };\n\n    result.ratio = result.total ? result.count / result.total / 60 : null; //Convert to seconds.\n    const simple = {\n      number: result.ratio,\n      text: result.ratio !== null ? result.ratio.toFixed(this.recommendedRounding) : \"N/A\",\n    };\n\n    return {\n      result: result,\n      simple: simple,\n    };\n  },\n};\n","/* eslint-disable */\n\n/*\n * Taken from: https://github.com/project-slippi/slippi-set-stats/blob/master/main.js\n */\n\nconst _ = require(\"lodash\");\n\nexport * from \"./firstBlood\";\nexport * from \"./lCancelAccuracy\";\nexport * from \"./neutralOpenerMoves\";\nexport * from \"./killMoves\";\nexport * from \"./selfDestructs\";\nexport * from \"./highestDamagePunish\";\nexport * from \"./highestDamageCombo\";\nexport * from \"./averageTimeToKill\";\n\nexport const openingsPerKill = {\n  name: \"Openings / Kill\",\n  type: \"number\",\n  betterDirection: \"lower\",\n  recommendedRounding: 1,\n  calculate(games, playerIndex) {\n    return genOverallRatioStat(games, playerIndex, \"openingsPerKill\", this.recommendedRounding);\n  },\n};\n\nexport const damagePerOpening = {\n  name: \"Damage / Opening\",\n  type: \"number\",\n  betterDirection: \"higher\",\n  recommendedRounding: 1,\n  calculate(games, playerIndex) {\n    return genOverallRatioStat(games, playerIndex, \"damagePerOpening\", this.recommendedRounding);\n  },\n};\n\nexport const neutralWins = {\n  name: \"Neutral Wins\",\n  type: \"number\",\n  betterDirection: \"higher\",\n  recommendedRounding: 0,\n  calculate(games, playerIndex) {\n    return genOverallRatioStat(games, playerIndex, \"neutralWinRatio\", this.recommendedRounding, \"count\");\n  },\n};\n\nexport const earlyKills = {\n  name: \"Earliest Kill\",\n  type: \"number\",\n  betterDirection: \"lower\",\n  recommendedRounding: 1,\n  calculate(games, playerIndex) {\n    const oppStocks = _.flatMap(games, (game) => {\n      const stocks = _.get(game, [\"stats\", \"stocks\"]) || [];\n      return _.filter(stocks, (stock) => {\n        const isOpp = stock.playerIndex !== playerIndex;\n        const hasEndPercent = stock.endPercent !== null;\n        return isOpp && hasEndPercent;\n      });\n    });\n\n    const orderedOppStocks = _.orderBy(oppStocks, [\"endPercent\"], [\"asc\"]);\n    const earliestKillStock = _.first(orderedOppStocks);\n    const simple = {\n      text: \"N/A\",\n      number: null,\n    };\n\n    if (earliestKillStock) {\n      simple.number = earliestKillStock.endPercent;\n      simple.text = simple.number.toFixed(this.recommendedRounding);\n    }\n\n    return {\n      result: _.take(orderedOppStocks, 5),\n      simple: simple,\n    };\n  },\n};\n\nexport const lateDeaths = {\n  name: \"Latest Death\",\n  type: \"number\",\n  betterDirection: \"higher\",\n  recommendedRounding: 0,\n  calculate(games, playerIndex) {\n    const playerStocks = _.flatMap(games, (game) => {\n      const stocks = _.get(game, [\"stats\", \"stocks\"]) || [];\n      return _.filter(stocks, (stock) => {\n        const isPlayer = stock.playerIndex === playerIndex;\n        const hasEndPercent = stock.endPercent !== null;\n        return isPlayer && hasEndPercent;\n      });\n    });\n\n    const orderedPlayerStocks = _.orderBy(playerStocks, [\"endPercent\"], [\"desc\"]);\n    const latestDeathStock = _.first(orderedPlayerStocks);\n    const simple = {\n      text: \"N/A\",\n      number: null,\n    };\n\n    if (latestDeathStock) {\n      simple.number = latestDeathStock.endPercent;\n      simple.text = simple.number.toFixed(this.recommendedRounding);\n    }\n\n    return {\n      result: _.take(orderedPlayerStocks, 5),\n      simple: simple,\n    };\n  },\n};\n\nexport const inputsPerMinute = {\n  name: \"Inputs / Minute\",\n  type: \"number\",\n  betterDirection: \"higher\",\n  recommendedRounding: 0,\n  calculate(games, playerIndex) {\n    return genOverallRatioStat(games, playerIndex, \"inputsPerMinute\", this.recommendedRounding);\n  },\n};\n\nexport const averageKillPercent = {\n  name: \"Average Kill Percent\",\n  type: \"number\",\n  betterDirection: \"lower\",\n  recommendedRounding: 0,\n  calculate(games, playerIndex) {\n    const oppStocks = _.flatMap(games, (game) => {\n      const stocks = _.get(game, [\"stats\", \"stocks\"]) || [];\n      return _.filter(stocks, (stock) => {\n        const isOpp = stock.playerIndex !== playerIndex;\n        const hasEndPercent = stock.endPercent !== null;\n        return isOpp && hasEndPercent;\n      });\n    });\n\n    const result = {\n      total: oppStocks.length,\n      count: _.sumBy(oppStocks, \"endPercent\") || 0,\n    };\n\n    result.ratio = result.total ? result.count / result.total : null;\n\n    return {\n      result: result,\n      simple: genSimpleFromRatio(result, this.recommendedRounding),\n    };\n  },\n};\n\nexport const damageDone = {\n  name: \"Total Damage Done\",\n  type: \"number\",\n  betterDirection: \"higher\",\n  recommendedRounding: 0,\n  calculate(games, playerIndex) {\n    return genOverallRatioStat(games, playerIndex, \"damagePerOpening\", this.recommendedRounding, \"count\");\n  },\n};\n\nfunction genOverallRatioStat(games, playerIndex, field, fixedNum, type = \"ratio\") {\n  const statRatios = _.map(games, (game) => {\n    const overallStats = _.get(game, [\"stats\", \"overall\"]);\n    const overallStatsByPlayer = _.keyBy(overallStats, \"playerIndex\");\n    const overallStatsForPlayer = overallStatsByPlayer[playerIndex];\n    return overallStatsForPlayer[field];\n  });\n\n  const avg = averageRatios(statRatios);\n  const simple = genSimpleFromRatio(avg, fixedNum, type);\n\n  return {\n    result: avg,\n    simple: simple,\n  };\n}\n\nfunction averageRatios(ratios) {\n  const result = {};\n\n  result.count = _.sumBy(ratios, \"count\") || 0;\n  result.total = _.sumBy(ratios, \"total\") || 0;\n  result.ratio = result.total ? result.count / result.total : null;\n\n  return result;\n}\n\nfunction genSimpleFromRatio(ratio, fixedNum, type = \"ratio\") {\n  const result = {};\n\n  switch (type) {\n    case \"ratio\":\n      result.number = ratio.ratio;\n      result.text = ratio.ratio !== null ? ratio.ratio.toFixed(fixedNum) : \"N/A\";\n      break;\n    case \"count\":\n      result.number = ratio.count;\n      result.text = ratio.count.toFixed(fixedNum);\n      break;\n  }\n\n  return result;\n}\n","/*\n * Based on: https://github.com/project-slippi/slippi-set-stats/blob/master/main.js\n */\n\nimport { characters as characterUtil, stages as stageUtil } from \"@slippi/slippi-js\";\nimport { PlayerType } from \"@slippi/slippi-js\";\nimport _ from \"lodash\";\n\nimport { convertFrameCountToDurationString } from \"../util\";\nimport { findWinner } from \"../winner\";\nimport {\n  averageKillPercent,\n  averageTimeToKill,\n  damageDone,\n  damagePerOpening,\n  earlyKills,\n  firstBlood,\n  highDamageCombos,\n  highDamagePunishes,\n  inputsPerMinute,\n  killMoves,\n  lateDeaths,\n  lCancelAccuracy,\n  neutralOpenerMoves,\n  neutralWins,\n  openingsPerKill,\n  selfDestructs,\n} from \"./definitions\";\nimport { GameDetails, Stat, StatDefinition } from \"./types\";\n\nexport const STAT_DEFINITIONS = new Map<string, StatDefinition>();\nSTAT_DEFINITIONS.set(Stat.OPENINGS_PER_KILL, openingsPerKill);\nSTAT_DEFINITIONS.set(Stat.DAMAGE_PER_OPENING, damagePerOpening);\nSTAT_DEFINITIONS.set(Stat.NEUTRAL_WINS, neutralWins);\nSTAT_DEFINITIONS.set(Stat.KILL_MOVES, killMoves);\nSTAT_DEFINITIONS.set(Stat.NEUTRAL_OPENER_MOVES, neutralOpenerMoves);\nSTAT_DEFINITIONS.set(Stat.FIRST_BLOOD, firstBlood);\nSTAT_DEFINITIONS.set(Stat.L_CANCEL, lCancelAccuracy);\nSTAT_DEFINITIONS.set(Stat.EARLY_KILLS, earlyKills);\nSTAT_DEFINITIONS.set(Stat.LATE_DEATHS, lateDeaths);\nSTAT_DEFINITIONS.set(Stat.SELF_DESTRUCTS, selfDestructs);\nSTAT_DEFINITIONS.set(Stat.INPUTS_PER_MINUTE, inputsPerMinute);\nSTAT_DEFINITIONS.set(Stat.AVG_KILL_PERCENT, averageKillPercent);\nSTAT_DEFINITIONS.set(Stat.AVG_TIME_TO_KILL, averageTimeToKill);\nSTAT_DEFINITIONS.set(Stat.HIGH_DAMAGE_PUNISHES, highDamagePunishes);\nSTAT_DEFINITIONS.set(Stat.HIGH_DAMAGE_COMBOS, highDamageCombos);\nSTAT_DEFINITIONS.set(Stat.DAMAGE_DONE, damageDone);\n\nfunction computeStats(statsList: string[], games: GameDetails[]) {\n  const firstGame = _.first(games);\n  if (!firstGame) {\n    return [];\n  }\n\n  // console.log(firstGame);\n  const orderIndices = _.map(firstGame.settings.players, \"playerIndex\");\n  const reversedIndices = _.chain(orderIndices).clone().reverse().value();\n  const indices = [orderIndices, reversedIndices];\n\n  const statResults = statsList.map((statKey) => {\n    const def = STAT_DEFINITIONS.get(statKey);\n    if (!def || !def.calculate) {\n      return null;\n    }\n\n    const { calculate, ...output } = def;\n    const results = _.map(indices, (iIndices) => {\n      const result: any = def.calculate(games, iIndices[0] /*, iIndices[1]*/);\n      result.port = iIndices[0] + 1;\n      return result;\n    });\n\n    return {\n      ...output,\n      id: statKey,\n      results,\n    };\n  });\n\n  return statResults;\n}\n\nfunction generateGameInfo(games: GameDetails[]) {\n  const getStartAt = (game: GameDetails) => game.metadata.startAt;\n  const orderedGames = _.orderBy(games, [getStartAt], [\"asc\"]);\n\n  const getResultForPlayer = (game: GameDetails, playerIndex: number): \"winner\" | \"loser\" | \"unknown\" => {\n    const gameEnd = game.gameEnd;\n    if (gameEnd) {\n      // Handle LRAS\n      switch (gameEnd.gameEndMethod) {\n        case 7:\n          return gameEnd.lrasInitiatorIndex === playerIndex ? \"loser\" : \"winner\";\n      }\n    }\n\n    const latestFrame = game.latestFrame;\n    if (!latestFrame) {\n      return \"unknown\";\n    }\n    const winner = findWinner(latestFrame);\n    return winner === playerIndex ? \"winner\" : \"loser\";\n  };\n\n  const generatePlayerInfo = (game: GameDetails) => (player: PlayerType) => {\n    // console.log(player);\n    const characterName =\n      player.characterId !== null ? characterUtil.getCharacterName(player.characterId) : `Player ${player.port}`;\n    const characterColor =\n      player.characterId !== null && player.characterColor !== null\n        ? characterUtil.getCharacterColorName(player.characterId, player.characterColor)\n        : \"Default\";\n\n    return {\n      port: player.port,\n      characterId: player.characterId,\n      nametag: player.nametag,\n      characterName,\n      characterColor,\n      gameResult: getResultForPlayer(game, player.playerIndex),\n    };\n  };\n\n  return _.map(orderedGames, (game: GameDetails) => {\n    const playerInfoGen = generatePlayerInfo(game);\n\n    return {\n      stage: {\n        id: game.settings.stageId,\n        name: game.settings.stageId !== null ? stageUtil.getStageName(game.settings.stageId) : \"\",\n      },\n      players: _.map(game.settings.players, playerInfoGen),\n      startTime: game.metadata.startAt,\n      duration: convertFrameCountToDurationString(game.stats.lastFrame),\n    };\n  });\n}\n\nexport function generateOutput(statsList: string[], games: GameDetails[]) {\n  return {\n    games: generateGameInfo(games),\n    summary: computeStats(statsList, games),\n  };\n}\n","import { get } from \"lodash\";\n\nimport { getPortColor } from \"../portColor\";\nimport { generateOutput } from \"./compute\";\nimport { filterGames } from \"./filterGames\";\nimport { GameDetails } from \"./types\";\n\nconst extractNameAndCode = (playerPort: number, details: GameDetails) => {\n  const settings = details.settings;\n  const metadata = details.metadata;\n  const index = playerPort - 1;\n  const player = settings.players.find((player) => player.playerIndex === index);\n  const playerTag = player ? player.nametag : null;\n  const netplayName: string | null = get(metadata, [\"players\", index, \"names\", \"netplay\"], null);\n  const netplayCode: string | null = get(metadata, [\"players\", index, \"names\", \"code\"], null);\n  const name = playerTag || netplayName || \"\";\n  return [name, netplayCode || \"\"] as const;\n};\n\nexport function generateStatParams(gameDetails: GameDetails[], statsList: string[]): Record<string, any> {\n  const filtered = filterGames(gameDetails);\n  if (!filtered || filtered.length === 0) {\n    throw new Error(\"No valid games\");\n  }\n\n  let stats;\n  try {\n    stats = generateOutput(statsList, filtered);\n  } catch (err) {\n    console.error(err);\n    throw new Error(err);\n  }\n\n  const { games, summary } = stats;\n  console.log(\"generated stats: \", stats);\n  const params: Record<string, any> = {}; // \"mckm1\": , \"mckm2\", \"mcno1\", \"mcno2\", \"opk1\", \"opk2\", \"tdd1\", \"tdd2\", \"dpo1\", \"dpo2\", \"ipm1\", \"ipm2\", \"akp1\", \"akp2\", \"nw1\", \"nw2\"};\n\n  // Set character info\n  const lastGame = games[games.length - 1];\n  const leftPlayer = lastGame.players[0];\n  const rightPlayer = lastGame.players[1];\n  params.leftColor = getPortColor(leftPlayer.port);\n  params.rightColor = getPortColor(rightPlayer.port);\n  params.leftPort = leftPlayer.port;\n  params.rightPort = rightPlayer.port;\n\n  params.char1 = leftPlayer.characterId;\n  params.char2 = rightPlayer.characterId;\n  params.color1 = leftPlayer.characterColor;\n  params.color2 = rightPlayer.characterColor;\n\n  // Set name tags\n  const lastGameDetails = filtered[filtered.length - 1];\n  const [leftTag, leftCode] = extractNameAndCode(leftPlayer.port, lastGameDetails);\n  const [rightTag, rightCode] = extractNameAndCode(rightPlayer.port, lastGameDetails);\n  params.name1 = leftTag.toUpperCase() || leftPlayer.characterName;\n  params.name2 = rightTag.toUpperCase() || rightPlayer.characterName;\n  params.sub1 = leftCode;\n  params.sub2 = rightCode;\n\n  // Set game info\n  params.gt = games.length; // Set the total number of games\n\n  games.forEach((game, i) => {\n    // console.log(\"processing game: \", game);\n    const gameKey = `g${i + 1}`;\n    const stageId = game.stage.id as number;\n    const gameDuration: string = game.duration;\n    const playerInfo = game.players.map((p: any) => [p.characterId, p.characterColor, p.gameResult].join(\",\"));\n    const gameValue = [stageId, gameDuration, ...playerInfo].join(\",\");\n    // console.log(`${gameKey} : ${gameValue}`);\n    params[gameKey] = gameValue;\n  });\n\n  params.stats = statsList.join(\",\");\n  // Set the stat values\n  summary.forEach((s) => {\n    // Stats can be null if the id is invalid or not specified\n    if (!s) {\n      return;\n    }\n\n    switch (s.id) {\n      // Put any custom logic here\n      default: {\n        (s.results as any[]).forEach((result, i) => {\n          params[`${s.id}${i + 1}`] = result.simple.text;\n        });\n        break;\n      }\n    }\n  });\n\n  console.log(\"returning these params: \", params);\n  return params;\n}\n","/* eslint-disable */\n\n/*\n * Taken from: https://github.com/project-slippi/slippi-set-stats/blob/master/main.js\n */\n\nimport _ from \"lodash\";\n\nexport function filterGames(games) {\n  // console.log(games);\n  const gamesByIsSingles = _.groupBy(games, (game) => {\n    const numberOfPlayers = game.settings.players.length;\n    return numberOfPlayers === 2;\n  });\n\n  const nonSinglesGames = _.get(gamesByIsSingles, false) || [];\n  if (_.some(nonSinglesGames)) {\n    console.log(\"The following games have been excluded because they are not singles games:\");\n    _.forEach(nonSinglesGames, (game) => {\n      console.log(game.filePath);\n    });\n    console.log();\n  }\n\n  const singlesGames = _.get(gamesByIsSingles, true) || [];\n  const gamesByPorts = _.chain(singlesGames)\n    .groupBy((game) => {\n      const ports = _.map(game.settings.players, \"port\");\n      return _.join(ports, \"-\");\n    })\n    .orderBy([\"length\"], [\"desc\"])\n    .value();\n\n  const gamesWithSamePorts = gamesByPorts.shift();\n  if (_.some(gamesByPorts)) {\n    console.log(\"The following games have been excluded because the player ports differ:\");\n    const flatGames = _.flatten(gamesByPorts);\n    _.forEach(flatGames, (game) => {\n      console.log(game.filePath);\n    });\n    console.log();\n  }\n\n  if (_.isEmpty(gamesWithSamePorts)) {\n    throw new Error(\"There were no valid games found to compute stats from.\");\n  }\n\n  console.log(`Including ${gamesWithSamePorts.length} games for stat calculation...`);\n\n  return gamesWithSamePorts;\n}\n","import { SlippiGame } from \"@slippi/slippi-js\";\n\nimport { GameDetails } from \"./stats/types\";\n\nexport async function readFileAsGameDetails(file: File): Promise<GameDetails> {\n  const game = await readFileAsSlippiGame(file);\n  return generateGameDetails(file.name, game);\n}\n\nasync function readFileAsSlippiGame(file: File): Promise<SlippiGame> {\n  const data = (await readFileAsArrayBuffer(file)) as ArrayBuffer;\n  const arr = new Int8Array(data);\n  const buf = Buffer.from(arr);\n  return new SlippiGame(buf);\n}\n\nfunction generateGameDetails(name: string, game: SlippiGame): GameDetails {\n  // For a valid SLP game, at the very least we should have valid settings\n  const settings = game.getSettings();\n  if (!settings) {\n    throw new Error(`Invalid SLP file. Could not find game settings in file: ${name}`);\n  }\n\n  const stats = game.getStats();\n  if (!stats) {\n    throw new Error(`Failed to process game stats for file: ${name}`);\n  }\n\n  const metadata = game.getMetadata();\n  if (!metadata) {\n    throw new Error(`Failed to load metadata for file: ${name}`);\n  }\n\n  return {\n    filePath: name,\n    settings,\n    frames: game.getFrames(),\n    stats,\n    metadata,\n    latestFrame: game.getLatestFrame(),\n    gameEnd: game.getGameEnd(),\n  };\n}\n\nasync function readFileAsArrayBuffer(file: File): Promise<string | ArrayBufferLike> {\n  return new Promise((resolve, reject) => {\n    const fr = new FileReader();\n    fr.onabort = () => reject(\"file reading was aborted\");\n    fr.onerror = () => reject(\"file reading has failed\");\n    if (fr.readAsBinaryString) {\n      fr.addEventListener(\n        \"load\",\n        function () {\n          const string = (this as any).resultString != null ? (this as any).resultString : this.result;\n          const result = new Uint8Array(string.length);\n          for (let i = 0; i < string.length; i++) {\n            result[i] = string.charCodeAt(i);\n          }\n          resolve(result.buffer);\n        },\n        false\n      );\n      fr.readAsBinaryString(file);\n    } else {\n      fr.addEventListener(\n        \"load\",\n        function () {\n          if (this.result) {\n            resolve(this.result);\n          } else {\n            reject(\"no data read\");\n          }\n        },\n        false\n      );\n      fr.readAsArrayBuffer(file);\n    }\n  });\n}\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport { ControlsButton, SecondaryButton } from \"components/Buttons\";\nimport React from \"react\";\n\nimport { StatOptionList } from \"./StatOptionList\";\nimport { StatOption } from \"./types\";\n\nexport * from \"./types\";\n\ninterface StatOptionsProps {\n  onClose: () => void;\n  value: StatOption[];\n  onChange: (stats: StatOption[]) => void;\n  onReset: () => void;\n  hideReset?: boolean;\n}\n\nexport const StatOptions: React.FC<StatOptionsProps> = (props) => {\n  return (\n    <div\n      css={css`\n        display: flex;\n        flex-direction: column;\n        flex-wrap: nowrap;\n        height: 100%;\n        width: 100%;\n      `}\n    >\n      <SecondaryButton align=\"right\" onClick={props.onClose}>\n        close\n      </SecondaryButton>\n      <div\n        css={css`\n          overflow: auto;\n          display: flex;\n          flex-direction: column;\n          margin-bottom: 2rem;\n        `}\n      >\n        <StatOptionList value={props.value} onChange={props.onChange} />\n      </div>\n      <ControlsButton color=\"black\" onClick={props.onClose}>\n        CLOSE\n      </ControlsButton>\n      {!props.hideReset && <SecondaryButton onClick={props.onReset}>restore defaults</SecondaryButton>}\n    </div>\n  );\n};\n","module.exports = __webpack_public_path__ + \"static/media/powered-by.61867ea8.png\";","import styled from \"@emotion/styled\";\nimport React from \"react\";\n\nconst Outer = styled.div<{\n  checked?: boolean;\n  isDragging?: boolean;\n}>`\n  opacity: ${(p) => (p.checked ? \"1\" : \"0.5\")};\n  background-color: ${(p) => (p.isDragging ? \"rgba(0, 0, 0, 0.6)\" : \"rgba(0, 0, 0, 0.3)\")};\n  color: white;\n  padding: 0.5rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 0.5rem;\n  font-weight: ${(p) => (p.checked ? \"600\" : \"100\")};\n  ${(p) =>\n    p.isDragging\n      ? `\n    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n    opacity: 1;\n`\n      : \"\"}\n\n  .title {\n    cursor: pointer;\n    user-select: none;\n    & > input[type=\"checkbox\"] {\n      margin-right: 1rem;\n    }\n  }\n  .handle {\n    display: flex;\n  }\n`;\n\nexport interface OptionProps extends Record<string, any> {\n  name: string;\n  checked?: boolean;\n  draggable?: boolean;\n  onChange: (checked: boolean) => void;\n  handleProps?: Record<string, any>;\n}\n\nexport const Option: React.FC<OptionProps> = (props) => {\n  const { name, checked, draggable, onChange, handleProps, children, ...rest } = props;\n  const toggle = () => props.onChange(!props.checked);\n  return (\n    <Outer checked={props.checked} {...rest}>\n      <label className=\"title\">\n        <input type=\"checkbox\" checked={props.checked} onChange={toggle} />\n        {name}\n      </label>\n      {draggable && (\n        <div className=\"handle\" {...handleProps}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n            <path d=\"M20 9H4v2h16V9zM4 15h16v-2H4v2z\" fill=\"#ffffff\" />\n          </svg>\n        </div>\n      )}\n    </Outer>\n  );\n};\n","import { STAT_DEFINITIONS } from \"lib/stats\";\nimport React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\nimport { Option } from \"./Option\";\n\nexport const StatOptionItem: React.FC<{\n  checked: boolean;\n  index: number;\n  id: string;\n  onChange: (checked: boolean) => void;\n}> = (props) => {\n  const stat = STAT_DEFINITIONS.get(props.id);\n  if (!stat) {\n    return null;\n  }\n  return (\n    <Draggable draggableId={props.id} index={props.index}>\n      {(provided, snapshot) => (\n        <div ref={provided.innerRef}>\n          <Option\n            {...provided.draggableProps}\n            isDragging={snapshot.isDragging}\n            checked={props.checked}\n            onChange={props.onChange}\n            draggable={true}\n            name={stat.name}\n            handleProps={provided.dragHandleProps}\n          />\n        </div>\n      )}\n    </Draggable>\n  );\n};\n","import { reorder } from \"lib/util\";\nimport React from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\nimport { StatOptionItem } from \"./StatOptionItem\";\nimport { StatOption } from \"./types\";\n\ninterface StatOptionListProps {\n  value: StatOption[];\n  onChange: (options: StatOption[]) => void;\n}\n\nexport const StatOptionList: React.FC<StatOptionListProps> = (props) => {\n  const statOptions = props.value;\n  const onDragEnd = (result: any) => {\n    const { destination, source } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n    const newArray = reorder(props.value, source.index, destination.index);\n    props.onChange(newArray);\n  };\n\n  const toggle = (statId: string) => {\n    const optionIndex = statOptions.findIndex((o) => o.statId === statId);\n    if (optionIndex === -1) {\n      return;\n    }\n    const newOptions = Array.from(statOptions);\n    const option = newOptions[optionIndex];\n    option.enabled = !option.enabled;\n    props.onChange(newOptions);\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId=\"stat-option-list\">\n        {(provided) => (\n          <div ref={provided.innerRef} {...provided.droppableProps}>\n            {statOptions.map((option, i) => {\n              return (\n                <StatOptionItem\n                  key={option.statId}\n                  index={i}\n                  id={option.statId}\n                  checked={option.enabled}\n                  onChange={() => toggle(option.statId)}\n                />\n              );\n            })}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\n","import { characters as characterUtil, moves as moveUtil, Stage } from \"@slippi/slippi-js\";\nimport { sampleSize } from \"lodash\";\n\nimport { Stat, STAT_DEFINITIONS } from \"./stats\";\nimport { convertFrameCountToDurationString } from \"./util\";\n\nconst LEGAL_STAGE_IDS = [\n  Stage.FOUNTAIN_OF_DREAMS,\n  Stage.POKEMON_STADIUM,\n  Stage.YOSHIS_STORY,\n  Stage.DREAMLAND,\n  Stage.BATTLEFIELD,\n  Stage.FINAL_DESTINATION,\n];\n\n/*\n * Random functions are taken from: https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\n */\n\n/**\n * Returns a random number between min (inclusive) and max (exclusive)\n */\nfunction getRandomArbitrary(min: number, max: number) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n * The value is no lower than min (or the next integer greater than min\n * if min isn't an integer) and no greater than max (or the next integer\n * lower than max if max isn't an integer).\n * Using Math.round() will give you a non-uniform distribution!\n */\nfunction getRandomInt(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function generateDemoValues(): Record<string, any> {\n  const paramMap: Record<string, any> = {};\n\n  // Set names\n  paramMap.name1 = \"FOLLOW\";\n  paramMap.name2 = \"ON\";\n  paramMap.sub1 = \"@_vinceau\";\n  paramMap.sub2 = \"TWITTER\";\n\n  // Set colors\n  const [char1, color1] = generateRandomCharacter();\n  const [char2, color2] = generateRandomCharacter();\n  paramMap.char1 = char1;\n  paramMap.color1 = color1;\n  paramMap.char2 = char2;\n  paramMap.color2 = color2;\n\n  // Random games\n  const totalGames = getRandomInt(3, 5);\n  paramMap.gt = totalGames;\n  sampleSize(LEGAL_STAGE_IDS, totalGames).forEach((stage, i) => {\n    const gameKey = `g${i + 1}`;\n    const leftWillWin = Math.random() < 0.5;\n    const leftPlayerInfo = [char1, color1, leftWillWin ? \"winner\" : \"loser\"].join(\",\");\n    const rightPlayerInfo = [char2, color2, leftWillWin ? \"loser\" : \"winner\"].join(\",\");\n    const gameValue = generateRandomGame([leftPlayerInfo, rightPlayerInfo], stage);\n    paramMap[gameKey] = gameValue;\n  });\n\n  const demoStats = [\n    Stat.KILL_MOVES,\n    Stat.NEUTRAL_OPENER_MOVES,\n    \"\",\n    Stat.OPENINGS_PER_KILL,\n    Stat.DAMAGE_DONE,\n    Stat.AVG_KILL_PERCENT,\n    Stat.NEUTRAL_WINS,\n  ];\n\n  paramMap.stats = demoStats.join(\",\");\n\n  demoStats\n    .filter((s) => Boolean(s))\n    .forEach((statId) => {\n      [1, 2].forEach((player) => {\n        const key = statId + player;\n        paramMap[key] = generateRandomStat(statId);\n      });\n    });\n  return paramMap;\n}\n\nfunction generateRandomStat(statId: string): string {\n  const stat = STAT_DEFINITIONS.get(statId);\n  if (!stat) {\n    return \"\";\n  }\n  switch (statId) {\n    case Stat.NEUTRAL_OPENER_MOVES:\n      return generateRandomMove();\n    case Stat.KILL_MOVES:\n      return generateRandomMove();\n    case Stat.OPENINGS_PER_KILL:\n      return getRandomArbitrary(5, 15).toFixed(stat.recommendedRounding);\n    case Stat.DAMAGE_DONE:\n      return getRandomArbitrary(1000, 2000).toFixed(stat.recommendedRounding);\n    case Stat.AVG_KILL_PERCENT:\n      return getRandomArbitrary(50, 200).toFixed(stat.recommendedRounding);\n    case Stat.NEUTRAL_WINS:\n      return getRandomInt(30, 80).toString();\n    default:\n      return \"\";\n  }\n}\n\nfunction generateRandomMove(): string {\n  const move = getRandomInt(7, 21);\n  const name = moveUtil.getMoveShortName(move).toUpperCase();\n  return `${name} - ${move}`;\n}\n\nfunction generateRandomCharacter() {\n  const charId = getRandomInt(0, 25);\n  const charInfo = characterUtil.getCharacterInfo(charId);\n  const colorIndex = getRandomInt(0, charInfo.colors.length - 1);\n  const color = charInfo.colors[colorIndex];\n  return [charId, color] as const;\n}\n\nfunction generateRandomStageId(): number {\n  const stageIndex = getRandomInt(0, LEGAL_STAGE_IDS.length - 1);\n  return LEGAL_STAGE_IDS[stageIndex];\n}\n\nfunction generateRandomDuration(): string {\n  // The number of frames in 30 seconds\n  const minFrames = 30 * 60;\n  // The number of frames in 8 minutes\n  const maxFrames = 8 * 60 * 60;\n  const frames = getRandomInt(minFrames, maxFrames);\n  return convertFrameCountToDurationString(frames);\n}\n\nfunction generateRandomGame(playerInfos: string[], stage?: Stage): string {\n  const stageId = stage !== undefined ? stage : generateRandomStageId();\n  const gameDuration = generateRandomDuration();\n  const gameValue = [stageId, gameDuration, ...playerInfos].join(\",\");\n  return gameValue;\n}\n","/** @jsx jsx */\nimport { css, Global, jsx } from \"@emotion/core\";\n\nexport interface Theme {\n  primaryColor: string;\n  secondaryColor: string;\n}\n\nexport const defaultTheme: Theme = {\n  primaryColor: \"#286163\",\n  secondaryColor: \"#121020\",\n};\n\nexport const GlobalTheme: React.FC = () => {\n  return (\n    <Global\n      styles={css`\n          * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n          }\n      `}\n    />\n  );\n};\n","import { defaultTheme } from \"styles/theme\";\n\nfunction getStoredValues(keys: string[]): Record<string, string | null> {\n  const res: Record<string, string | null> = {};\n  keys.forEach((key) => {\n    const value = localStorage.getItem(key);\n    if (value) {\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nexport function generateSearchParams(params: Record<string, any>): URLSearchParams {\n  const restoredParams = getStoredValues([\"primaryColor\", \"secondaryColor\", \"leftColor\", \"rightColor\"]);\n  const searchParams = new URLSearchParams({\n    ...defaultTheme,\n    ...restoredParams,\n    ...params,\n  });\n  return searchParams;\n}\n","import { generateDemoValues } from \"lib/demo\";\nimport { generateSearchParams } from \"lib/searchParams\";\nimport React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nexport const RandomView: React.FC = () => {\n  const params = generateDemoValues();\n  const search = \"?\" + generateSearchParams(params).toString();\n  return (\n    <Redirect\n      to={{\n        pathname: \"/render\",\n        search,\n      }}\n    />\n  );\n};\n","import { GameDetails } from \"lib/stats/types\";\n\nimport { InitialStateType, ProcessedFile } from \"./types\";\n\ntype ActionMap<M extends { [index: string]: any }> = {\n  [Key in keyof M]: M[Key] extends undefined\n    ? {\n        type: Key;\n      }\n    : {\n        type: Key;\n        payload: M[Key];\n      };\n};\n\nexport enum Types {\n  ADD_FILES = \"ADD_FILES\",\n  SET_DETAILS = \"SET_DETAILS\",\n  SET_ERROR = \"SET_ERROR\",\n  REMOVE_FILE = \"REMOVE_FILE\",\n  CLEAR_ALL = \"CLEAR_ALL\",\n}\n\ntype ActionPayload = {\n  [Types.SET_DETAILS]: {\n    filename: string;\n    details: GameDetails;\n  };\n  [Types.SET_ERROR]: {\n    filename: string;\n    error: any;\n  };\n  [Types.ADD_FILES]: {\n    files: File[];\n  };\n  [Types.REMOVE_FILE]: {\n    filename: string;\n  };\n  [Types.CLEAR_ALL]: never;\n};\n\nexport type ReducerActions = ActionMap<ActionPayload>[keyof ActionMap<ActionPayload>];\n\nexport const reducer = (state: InitialStateType, action: ReducerActions) => {\n  switch (action.type) {\n    case Types.SET_DETAILS: {\n      const { filename, details } = action.payload;\n      const files = state.files;\n      const fileToReplace = files.findIndex((f) => f.filename === filename);\n      if (fileToReplace !== -1) {\n        files[fileToReplace].details = details;\n        files[fileToReplace].loading = false;\n      }\n      return {\n        ...state,\n        files,\n      };\n    }\n    case Types.SET_ERROR: {\n      const { filename, error } = action.payload;\n      const files = state.files;\n      const fileToReplace = files.findIndex((f) => f.filename === filename);\n      if (fileToReplace !== -1) {\n        files[fileToReplace].error = error;\n        files[fileToReplace].loading = false;\n      }\n      return {\n        ...state,\n        files,\n      };\n    }\n    case Types.ADD_FILES: {\n      const { files } = action.payload;\n      const currentFiles = state.files;\n      let newFiles: ProcessedFile[] = files.map((f) => ({\n        filename: f.name,\n        loading: true,\n        details: null,\n      }));\n\n      // Make sure there are no duplicate filenames\n      newFiles = newFiles.filter((f) => !currentFiles.find((existingFile) => f.filename === existingFile.filename));\n\n      return {\n        ...state,\n        files: [...currentFiles, ...newFiles],\n      };\n    }\n    case Types.REMOVE_FILE: {\n      const { filename } = action.payload;\n      const files = state.files.filter((f) => f.filename !== filename);\n      return {\n        ...state,\n        files,\n      };\n    }\n    case Types.CLEAR_ALL: {\n      return {\n        ...state,\n        files: [],\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import React, { createContext, Dispatch, useReducer } from \"react\";\n\nimport { reducer, ReducerActions } from \"./reducers\";\nimport { InitialStateType } from \"./types\";\n\nconst initialState: InitialStateType = {\n  files: [],\n};\n\nconst AppContext = createContext<{\n  state: InitialStateType;\n  dispatch: Dispatch<ReducerActions>;\n}>({\n  state: initialState,\n  dispatch: () => null,\n});\n\nconst mainReducer = (state: InitialStateType, action: ReducerActions) => reducer(state, action);\n\nconst AppProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(mainReducer, initialState);\n\n  return <AppContext.Provider value={{ state, dispatch }}>{children}</AppContext.Provider>;\n};\n\nexport { AppProvider, AppContext };\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { DropzoneOptions, useDropzone } from \"react-dropzone\";\n\nconst Container = styled.div`\n  cursor: pointer;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border-width: 2px;\n  width: 700px;\n\theight: 85px;\n\tbackground-color: gray;\n\tmargin: 15px auto;\n  p {\n    text-align: center;\n    text-transform: uppercase;\n    font-weight: bold;\n    margin-top: 35px;\n  }\n`;\n\nexport const DropPad: React.FC<Partial<DropzoneOptions>> = (props) => {\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone(props);\n\n  return (\n    <Container {...getRootProps({ isDragActive, isDragAccept, isDragReject })}>\n      <input {...getInputProps()} />\n      <p>Drag replay file here or click to select</p>\n    </Container>\n  );\n};\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport React from \"react\";\n\nexport const ErrorMessage: React.FC = (props) => {\n  return (\n    <span\n      css={css`\n        color: #bf2600;\n        font-weight: bold;\n      `}\n    >\n      ERROR: {props.children}\n    </span>\n  );\n};\n","import { characters as characterUtil, stages as stageUtil } from \"@slippi/slippi-js\";\n\nexport type Side = \"left\" | \"right\";\n\nfunction sanitize(text: string, replacement = \"-\"): string {\n  return text.toLowerCase().replace(/[. &]+/gi, replacement);\n}\n\nfunction getCharacterFolderFromId(characterId: string | number, color?: string) {\n  const characterName = characterUtil.getCharacterName(+characterId);\n  return getCharacterFolderFromName(characterName, color);\n}\n\nfunction getCharacterFolderFromName(character: string, color = \"Default\") {\n  const charFolder = sanitize(character);\n  const colorFolder = sanitize(color);\n  return `${process.env.PUBLIC_URL}/images/characters/${charFolder}/${colorFolder}`;\n}\n\nexport function getCharacterPortrait(characterId: string | number, color?: string): string {\n  const folder = getCharacterFolderFromId(characterId, color);\n  return `${folder}/portrait.png`;\n}\n\nexport function getCharacterVSScreen(side: Side, characterId: string | number, color?: string): string {\n  const folder = getCharacterFolderFromId(characterId, color);\n  return `${folder}/vs-${side}.png`;\n}\n\nexport function getCharacterStockIcon(characterId: string | number, color?: string): string {\n  const folder = getCharacterFolderFromId(characterId, color);\n  return `${folder}/stock.png`;\n}\n\nexport function getStageIcon(stageId: string | number): string {\n  const stageName = stageUtil.getStageName(+stageId);\n  return `${process.env.PUBLIC_URL}/images/stages/${stageName}.png`;\n}\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport { characters as characterUtil, stages as stageUtil } from \"@slippi/slippi-js\";\nimport { ErrorMessage } from \"components/ErrorMessage\";\nimport { getCharacterStockIcon } from \"lib/resources\";\nimport { convertFrameCountToDurationString } from \"lib/util\";\nimport { findWinner } from \"lib/winner\";\nimport React from \"react\";\nimport { ProcessedFile } from \"store/types\";\nimport { hasOpacity } from \"styles/opacity\";\nimport { defaultTheme } from \"styles/theme\";\n\nconst BasicFileItem: React.FC<{ name: string; onRemove?: () => void }> = (props) => {\n  const { onRemove, name, children } = props;\n  return (\n    <div\n      css={css`\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        width: 700px;\n        height: 85px;\n        background-color: gray;\n        margin: 15px auto;\n        &:hover {\n          .remove-button {\n            opacity: 1;\n          }\n        }\n        .remove-button {\n          opacity: 0;\n          transition: opacity 0.2s ease-in-out;\n          background: white;\n          color: ${defaultTheme.secondaryColor};\n          border: none;\n          font-weight: bold;\n          font-size: 2.5rem;\n          cursor: pointer;\n          padding: 0.2rem 1rem;\n          margin: 0;\n        }\n      `}\n    >\n      <div\n        css={css`\n          flex: 1;\n          padding: 0rem 0 0 0rem;\n        `}\n      >\n        <div\n          css={css`\n            padding: 0.5rem 0 0 2rem;\n            font-size: 1.6rem;\n            font-weight: bold;\n            margin-bottom: 1rem;\n            font-family: monospace;\n          `}\n        >\n          {name}\n        </div>\n        <div\n          css={css`\n            padding: 0 0 0 10rem;\n          `}\n        >{children}</div>\n      </div>\n      {onRemove && (\n        <button className=\"remove-button\" onClick={onRemove} title=\"Remove\">\n          ✕\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst CharacterIcon: React.FC<{\n  charId: string | number;\n  color: string;\n  winner?: boolean;\n}> = ({ charId, color, winner }) => {\n  const src = getCharacterStockIcon(charId, color);\n  return (\n    <div\n      css={css`\n        position: relative;\n        display: inline-block;\n        margin-top: 0.5rem;\n        ${winner &&\n        `&::after {\n          position: absolute;\n          content: \" \";\n          height: 0.7rem;\n          width: 60%;\n          background-color: #ffa700;\n          left: 20%;\n          bottom: 110%;\n          clip-path: polygon(50% 0%, 75% 35%, 100% 0, 100% 100%, 0 100%, 0 0, 25% 35%);\n        }\n      `}\n      `}\n    >\n      <img src={src} style={{ height: \"3rem\" }} alt=\"stock icon\" />\n    </div>\n  );\n};\n\nexport interface FileItemProps {\n  file: ProcessedFile;\n  onRemove: () => void;\n}\n\nexport const FileItem: React.FC<FileItemProps> = (props) => {\n  const { file, onRemove } = props;\n  const { filename, loading, error, details } = file;\n  if (loading) {\n    return (\n      <BasicFileItem name={filename}>\n        <span\n          css={css`\n            font-weight: bold;\n          `}\n        >\n          LOADING...\n        </span>\n      </BasicFileItem>\n    );\n  }\n  if (error || !details) {\n    return (\n      <BasicFileItem onRemove={onRemove} name={filename}>\n        <ErrorMessage>{error.message}</ErrorMessage>\n      </BasicFileItem>\n    );\n  }\n\n  const stageName = stageUtil.getStageName(details.settings.stageId as number);\n  const players = details.settings.players;\n  const duration = details.latestFrame ? convertFrameCountToDurationString(details.latestFrame.frame) : \"N/A\";\n  const winnerIndex = details.latestFrame ? findWinner(details.latestFrame) : null;\n  const icons = players.map((player) => {\n    const winner = player.playerIndex === winnerIndex;\n    const charId = player.characterId as number;\n    const color = characterUtil.getCharacterColorName(charId, player.characterColor as number);\n    return <CharacterIcon key={`${player.port}-icon`} charId={charId} color={color} winner={winner} />;\n  });\n  return (\n    <BasicFileItem onRemove={onRemove} name={filename}>\n      <div\n        css={css`\n          display: grid;\n          justify-items: center;\n          align-items: center;\n          grid-template-columns: repeat(3, 1fr);\n          font-weight: bold;\n        `}\n      >\n        <div>{stageName}</div>\n        <div\n          css={css`\n            display: grid;\n            grid-auto-flow: column;\n            grid-column-gap: 1rem;\n          `}\n        >\n          {icons}\n        </div>\n        <div>{duration}</div>\n      </div>\n    </BasicFileItem>\n  );\n};\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport React from \"react\";\nimport { ProcessedFile } from \"store/types\";\n\nimport { FileItem } from \"./FileItem\";\n\nexport interface FileListProps {\n  files: ProcessedFile[];\n  onRemove: (filename: string) => void;\n}\n\nexport const FileList: React.FC<FileListProps> = (props) => {\n  const { files, onRemove } = props;\n  return (\n    <div\n      css={css`\n        display: grid;\n        grid-template-columns: 100%;\n        grid-row-gap: 1rem;\n      `}\n    >\n      {files.map((f) => (\n        <FileItem key={f.filename} file={f} onRemove={() => onRemove(f.filename)} />\n      ))}\n    </div>\n  );\n};\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport { ControlsButton, ResetButton } from \"components/Buttons\";\nimport { DropPad } from \"components/DropPad\";\nimport { ErrorMessage } from \"components/ErrorMessage\";\nimport { FileList } from \"components/FileList\";\nimport { readFileAsGameDetails } from \"lib/readFile\";\nimport { generateSearchParams } from \"lib/searchParams\";\nimport { generateStatParams } from \"lib/stats\";\nimport { GameDetails, Stat } from \"lib/stats/types\";\nimport React, { useCallback, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { AppContext, Types } from \"../store\";\nimport { StatOption, StatOptions } from \"./StatOptions\";\n\nlet timer: any = null;\n\nconst STAT_OPTIONS_STORE_KEY = \"statOptions\";\n\nconst ALL_STATS: string[] = [\n  Stat.INPUTS_PER_MINUTE,\n  Stat.DAMAGE_PER_OPENING,\n  Stat.OPENINGS_PER_KILL,\n  Stat.DAMAGE_DONE,\n  Stat.AVG_KILL_PERCENT,\n  Stat.NEUTRAL_WINS,\n  Stat.L_CANCEL,\n  Stat.FIRST_BLOOD,\n  Stat.EARLY_KILLS,\n  Stat.LATE_DEATHS,\n  Stat.SELF_DESTRUCTS,\n  Stat.HIGH_DAMAGE_PUNISHES,\n  Stat.HIGH_DAMAGE_COMBOS,\n  Stat.AVG_TIME_TO_KILL,\n];\n\nconst DEFAULT_STATS = [Stat.INPUTS_PER_MINUTE, Stat.OPENINGS_PER_KILL, Stat.AVG_KILL_PERCENT, Stat.HIGH_DAMAGE_COMBOS];\n\nconst getDefaultStats = (): StatOption[] => {\n  const current = DEFAULT_STATS.map((s) => ({\n    statId: s,\n    enabled: true,\n  }));\n  return validateStatOptions(current);\n};\n\nconst validateStatOptions = (current: StatOption[]): StatOption[] => {\n  const newItems: StatOption[] = ALL_STATS.filter(\n    (statId) => !current.find((option) => option.statId === statId)\n  ).map((statId) => ({ statId, enabled: false }));\n\n  // Make sure the ones we're showing are supported\n  const currentItems = current.filter((c) => ALL_STATS.includes(c.statId));\n  return [...currentItems, ...newItems];\n};\n\nconst generateStatsList = (options: StatOption[]): string[] => {\n  // const statsList = options.filter((s) => s.enabled).map((s) => s.statId);\n  return [\n    Stat.INPUTS_PER_MINUTE,\n    Stat.OPENINGS_PER_KILL,\n    Stat.AVG_TIME_TO_KILL,\n    Stat.HIGH_DAMAGE_COMBOS,\n    Stat.KILL_MOVES,\n  ];\n};\n\nexport const FileListInput: React.FC = () => {\n  const history = useHistory();\n  const { state, dispatch } = useContext(AppContext);\n  const [error, setError] = React.useState<any>(null);\n  const [showOptions, setShowOptions] = React.useState(false);\n\n  const clearAll = () => {\n    dispatch({\n      type: Types.CLEAR_ALL,\n    });\n    history.push({\n      pathname: \"/\"\n    });\n    resetHud();\n  };\n\n  let defaultStats = getDefaultStats();\n  let statsModified = false;\n  // Since we're persisting user options in localStorage, we need to be able to\n  // handle the case where new options are available, yet not in their localStorage.\n  const restoredStatsString = localStorage.getItem(STAT_OPTIONS_STORE_KEY);\n  if (restoredStatsString) {\n    statsModified = restoredStatsString !== JSON.stringify(defaultStats);\n    defaultStats = validateStatOptions(JSON.parse(restoredStatsString));\n  }\n\n  const [statOptions, setStatOptions] = React.useState<StatOption[]>(defaultStats);\n\n  const onStatOptionReset = () => {\n    onStatOptionChange(getDefaultStats());\n  };\n\n  const onStatOptionChange = (options: StatOption[]) => {\n    localStorage.setItem(STAT_OPTIONS_STORE_KEY, JSON.stringify(options));\n    setStatOptions(options);\n  };\n\n  const onClick = () => {\n    try {\n      const gameDetails = state.files.filter((f) => f.details !== null).map((f) => f.details as GameDetails);\n      const params = generateStatParams(gameDetails, generateStatsList(statOptions));\n      const search = \"?\" + generateSearchParams(params).toString();\n      history.push({\n        search,\n      });\n      resetHud();\n      const welcomeMessage = document.getElementById(\"welcome-message\");\n      fadeLoop(welcomeMessage as HTMLElement);\n    } catch (err) {\n      console.error(error);\n      setError(err);\n    }\n  };\n\n  const fadeLoop = (element: HTMLElement) => {\n    element.style.display = 'block';\n    element.classList.add('fadeIn');\n    timer = setTimeout(() => {\n      element.classList.remove('fadeIn');\n      element.classList.add('fadeOut');\n      timer = setTimeout(() => {\n        element.classList.remove('fadeOut');\n        element.style.display = 'none';\n        let nextSibling = element.nextElementSibling;\n        if(nextSibling == null)\n        {\n          nextSibling = document.getElementById(\"welcome-message\");\n        }\n        fadeLoop(nextSibling as HTMLElement);\n      }, 1000);\n    }, 1000);\n  };\n\n  const onRemove = (filename: string) => {\n    const gameDetails = state.files.filter((f) => f.details !== null).map((f) => f.details as GameDetails);\n    const params = generateStatParams(gameDetails, generateStatsList(statOptions));\n    const search = \"?\" + generateSearchParams(params).toString();\n    history.push({\n      search,\n    });\n    dispatch({\n      type: Types.REMOVE_FILE,\n      payload: {\n        filename,\n      },\n    });\n  };\n\n  const resetHud = () => {\n    clearTimeout(timer);\n    const welcomeMessage = (document.getElementById(\"welcome-message\") as HTMLElement);\n    welcomeMessage.classList.remove('fadeIn');\n    welcomeMessage.classList.remove('fadeOut');\n    (welcomeMessage as HTMLElement).style.display = 'block';\n    let element = (welcomeMessage as HTMLElement).nextElementSibling;\n    while(element != null){\n      element.classList.remove('fadeIn');\n      element.classList.remove('fadeOut');\n      (element as HTMLElement).style.display = 'none';\n      element = element.nextElementSibling;\n    }\n  };\n\n  const onDrop = useCallback(\n    (acceptedFiles: File[]) => {\n      // Track how long processing takes\n      const startTime = new Date().getTime();\n\n      // First add all the files to the store\n      dispatch({\n        type: Types.ADD_FILES,\n        payload: {\n          files: acceptedFiles,\n        },\n      });\n\n      const promises = acceptedFiles.map(async (file) => {\n        try {\n          const details = await readFileAsGameDetails(file);\n          dispatch({\n            type: Types.SET_DETAILS,\n            payload: {\n              filename: file.name,\n              details,\n            },\n          });\n        } catch (err) {\n          console.error(error);\n          dispatch({\n            type: Types.SET_ERROR,\n            payload: {\n              filename: file.name,\n              error: err,\n            },\n          });\n        }\n      });\n\n      // Print the time taken when complete\n      Promise.all(promises).then(() => {\n        const time = new Date().getTime() - startTime;\n        console.log(`Finished processing in ${time}ms`);\n      });\n    },\n    [dispatch, error]\n  );\n\n  const finishedProcessing = !state.files.find((f) => f.loading);\n  const buttonText =\n    state.files.length === 0 ? \"Start/Update Stats Bar\" : finishedProcessing ? \"Start/Update Stats Bar\" : \"Please Wait\";\n\n  if (showOptions) {\n    return (\n      <StatOptions\n        onClose={() => setShowOptions(false)}\n        value={statOptions}\n        onChange={onStatOptionChange}\n        onReset={onStatOptionReset}\n        hideReset={!statsModified}\n      />\n    );\n  }\n\n  return (\n    <div\n      css={css`\n        display: flex;\n        flex-direction: column;\n        flex-wrap: nowrap;\n        width: 100%;\n        height: 100%;\n      `}\n    >\n      <DropPad accept=\".slp\" onDrop={onDrop} />\n      <div\n        css={css`\n          overflow: auto;\n          display: flex;\n          flex-direction: column;\n          margin: 1rem 0;\n        `}\n      >\n        <FileList files={state.files} onRemove={onRemove} />\n      </div>\n      <ControlsButton\n        css={css`\n          margin-bottom: 5px;\n        `}\n        color=\"white\"\n        disabled={state.files.length === 0 || !finishedProcessing}\n        onClick={onClick}\n      >\n        {buttonText}\n      </ControlsButton>\n      {state.files.length > 0 && <ResetButton onClick={clearAll}>Reset</ResetButton>}\n      {error && <ErrorMessage>{error.message}</ErrorMessage>}\n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport function useParam(key: string, defaultValue = \"\") {\n  const [value, setValue] = useState<string>(defaultValue);\n  const history = useHistory();\n  const location = useLocation();\n\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const currentValue = params.get(key);\n    if (currentValue !== value) {\n      setValue(currentValue || defaultValue);\n    }\n  }, [key, defaultValue, location, value]);\n\n  const setParam = (val: string) => {\n    const params = new URLSearchParams(location.search);\n    params.set(key, val);\n    const search = \"?\" + params.toString();\n    history.push({\n      pathname: location.pathname,\n      search,\n    });\n  };\n\n  return [value, setParam] as const;\n}\n","import styled from \"@emotion/styled\";\n\nexport const StatDisplayItem = styled.div<{\n  hasItem: boolean;\n  isDragging?: boolean;\n  isDraggingOver?: boolean;\n}>`\n`;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport React from \"react\";\n\nexport interface StatProps {\n  label: string;\n  color: string;\n  leftPort: string;\n  rightPort: string;\n  leftComponent: React.ReactNode;\n  rightComponent: React.ReactNode;\n}\n\nconst StatLabel = styled.div`\n  font-weight: 900;\n  font-size: 24px;\n`;\n\nconst StatContent = styled.div`\n  font-weight: 900;\n  font-size: 30px;\n`;\n\nconst TextContent = styled(StatContent)`\n  font-weight: 900;\n  font-size: 30px;\n`;\n\nconst OuterStat = styled.div`\n  display: grid;\n  grid-template-columns: 250px 690px 250px;\n  width: 100%;\n`;\n\nconst Stat: React.FC<StatProps & Record<string, any>> = (props) => {\n  const { label, backgroundColor, color, leftPort, rightPort, leftComponent, rightComponent, children, ...rest } = props;\n  return (\n    <OuterStat>\n      <div \n        className={\"hud-stats-box left-stats-box left-player-\" + leftPort}\n      >\n        {leftComponent}\n      </div>\n      <StatLabel \n        className=\"hud-title-bar\"\n      >\n        <p \n          className=\"hud-title-text\"\n        >\n          {label}\n        </p>\n      </StatLabel>\n      <div \n        className={\"hud-stats-box right-stats-box right-player-\" + rightPort}\n      >\n        {rightComponent}\n      </div>\n    </OuterStat>\n  );\n};\n\nStat.defaultProps = {\n  color: \"black\",\n  backgroundColor: \"white\",\n};\n\nexport const NumberStat: React.FC<StatProps> = (props) => {\n  const { leftComponent, rightComponent, leftPort, rightPort, ...rest } = props;\n  return (\n    <Stat\n      leftComponent={\n                      <div\n                        className=\"stats-box-text\"\n                      >\n                        {leftComponent}\n                      </div>}\n      rightComponent={\n                      <div\n                        className=\"stats-box-text\"\n                      >\n                        {rightComponent}\n                      </div>}\n      leftPort={leftPort}\n      rightPort={rightPort}\n      {...rest}\n    />\n  );\n};\n\nexport const TextStat: React.FC<StatProps> = (props) => {\n  const { leftComponent, rightComponent, leftPort, rightPort, ...rest } = props;\n  return (\n    <Stat\n      leftComponent={\n                      <div\n                        className=\"stats-box-text\"\n                      >\n                        {leftComponent}\n                      </div>}\n      rightComponent={\n                      <div\n                        className=\"stats-box-text\"\n                      >\n                        {rightComponent}\n                      </div>}\n      leftPort={leftPort}\n      rightPort={rightPort}\n      {...rest}\n    />\n  );\n};\n","import { InlineEdit } from \"components/InlineEdit\";\nimport { NumberStat, TextStat } from \"components/Stat\";\nimport { useParam } from \"lib/hooks\";\nimport { STAT_DEFINITIONS } from \"lib/stats\";\nimport React from \"react\";\nimport { Theme } from \"styles/theme\";\n\ninterface ConnectedStatProps {\n  param1: string;\n  param2: string;\n  label: string;\n}\n\nconst ConnectedNumberStat: React.FC<ConnectedStatProps & Record<string, any>> = (props) => {\n  const { param1, param2, leftPort, rightPort, label, children, ...rest } = props;\n  const defaultValue = \"0\";\n  const [field1, setField1] = useParam(param1, defaultValue);\n  const [field2, setField2] = useParam(param2, defaultValue);\n  return (\n    <NumberStat\n      label={label}\n      color=\"white\"\n      leftPort={leftPort}\n      rightPort={rightPort}\n      leftComponent={<span>{field1}</span>}\n      rightComponent={<span>{field2}</span>}\n      {...rest}\n    />\n  );\n};\n\nconst ConnectedTextStat: React.FC<ConnectedStatProps & Theme & Record<string, any>> = (props) => {\n  const { param1, param2, leftPort, rightPort, label, primaryColor, children, ...rest } = props;\n  const defaultValue = \"-\";\n  const [field1, setField1] = useParam(param1, defaultValue);\n  const [field2, setField2] = useParam(param2, defaultValue);\n  return (\n    <TextStat\n      label={label}\n      color=\"white\"\n      leftPort={leftPort}\n      rightPort={rightPort}\n      leftComponent={<span>{field1}</span>}\n      rightComponent={<span>{field2}</span>}\n      {...rest}\n    />\n  );\n};\n\nexport const Statistic: React.FC<\n  {\n    statId: string;\n  } & Record<string, any>\n> = (props) => {\n  const { statId, theme, children, leftPort, rightPort, ...rest } = props;\n  const statInfo = STAT_DEFINITIONS.get(statId);\n  if (!statInfo) {\n    return null;\n  }\n\n  const { name, type } = statInfo;\n  const label = (name as string).toUpperCase();\n  if (type === \"number\") {\n    return <ConnectedNumberStat param1={`${statId}1`} param2={`${statId}2`} leftPort={leftPort} rightPort={rightPort} label={label} {...rest} />;\n  } else if (type === \"text\") {\n    return <ConnectedTextStat param1={`${statId}1`} param2={`${statId}2`} leftPort={leftPort} rightPort={rightPort} label={label} {...theme} {...rest} />;\n  }\n\n  return null;\n};\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport { reorder } from \"lib/util\";\nimport React from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { Theme } from \"styles/theme\";\n\nimport { Divider } from \"./Divider\";\nimport { StatDisplayItem } from \"./StatDisplayItem\";\nimport { Statistic } from \"./Statistic\";\n\ninterface StatDisplayListProps {\n  stats: string;\n  setStats: (s: string) => void;\n  leftPort: string;\n  rightPort: string;\n}\n\nexport const StatDisplayList: React.FC<StatDisplayListProps> = (props) => {\n  const { stats, setStats, leftPort, rightPort } = props;\n  const [items, setItems] = React.useState<string[]>(stats.split(\",\"));\n  React.useEffect(() => {\n    setItems(stats.split(\",\"));\n  }, [stats]);\n\n  return (\n    <div\n      className=\"hud-container\"\n      css={css`\n      `}\n    >\n      <div\n        id=\"welcome-message\"\n      >\n        <p \n          css={css`\n            font-family: 'Lato', sans-serif;\n            font-weight: 900;\n            color: white;\n            text-align: center;\n            font-size: 25px;\n            margin-top: 6px;\n          `}\n        >\n          Welcome from Vancouver, BC!\n        </p>\n      </div>\n      <div \n        id=\"smarthud-logo\"\n        css={css`\n          display:none;\n        `}\n      >\n        <img \n          css={css`\n            margin-top: 6px;\n            max-height: 34px;\n          `}\n          src=\"SMART-HUD-LOGO.svg\" \n          alt=\"smartHUD\"\n        />\t\n      </div>\n      {items.map((item, index) => {\n        return (\n                <StatDisplayItem\n                  hasItem={Boolean(item)}\n                  key={index}\n                  css={css`\n                    display:none;\n                  `}\n                >\n                  <Statistic statId={item} leftPort={leftPort} rightPort={rightPort} />\n                </StatDisplayItem>\n        );\n      })}\n    </div>\n  );\n};\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport { useParam } from \"lib/hooks\";\nimport { PortColor } from \"lib/portColor\";\nimport React from \"react\";\n\nimport { StatDisplayList } from \"./StatDisplay/StatDisplayList\";\n\nconst NameBlockContainer = styled.div<{\n  align: \"left\" | \"right\";\n}>`\n  ${(p) => `\n  width: 20%;\n  position: absolute;\n  ${p.align}: 0;\n  margin-${p.align}: 2rem;\n  bottom: 15%;\n  `}\n`;\n\nexport const RenderDisplay: React.FC = () => {\n  const [leftPort] = useParam(\"leftPort\");\n  const [rightPort] = useParam(\"rightPort\");\n  const [stats, setStats] = useParam(\"stats\");\n\n  return (\n    <StatDisplayList stats={stats} setStats={setStats} leftPort={leftPort} rightPort={rightPort} />\n  );\n};\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport { ExternalLink as A } from \"components/ExternalLink\";\nimport { Header } from \"components/Header\";\nimport { FileListInput } from \"containers/FileListInput\";\nimport React from \"react\";\nimport { hasOpacity } from \"styles/opacity\";\nimport { GlobalTheme } from \"styles/theme\";\n\nimport { RenderDisplay } from \"../containers/RenderDisplay\";\n\nconst linkStyle = css`\n  display: block;\n  text-align: center;\n  text-decoration: none;\n  background: white;\n  padding: 1rem 0rem;\n  width: 100%;\n  font-weight: 700;\n  font-size: 2.3rem;\n  cursor: pointer;\n  ${hasOpacity(0.8)};\n`;\n\nconst MasterContainer = styled.div`\n  width: 1920px;\n  height: 1100px;\n  padding-top: 45px;\n  font-family: 'Lato', sans-serif;\n  font-weight: 900;\n  color: white;\n`;\n\nconst GameFrame = styled.div`\n  width: 1200px;\n  height: 990px;\n  border: 5px solid #09001e;\n  margin-left: auto;\n\tmargin-right: auto;\n`;\n\nconst ReplayControlsContainer = styled.div`\n  width: 850px;\n  margin: 150px auto;\n  padding-top: 25px;\n  padding-bottom: 25px;\n  background-color: #09001e40;\n`;\n\nconst ControlsTitle = styled.div`\n  font-family: 'Lato', sans-serif;\n  font-weight: 900;\n  color: black;\n  text-align: center;\n  font-size: 25px;\n`;\n\nexport const MainView: React.FC = () => {\n  return (\n    <div\n      css={css`\n        height: 100%;\n        width: 100%;\n      `}\n    >\n      <div className=\"hud-master-container\">\n        <div className=\"hud-game-frame\">\n          <div className=\"hud-replay-controls-container\">\n            <div className=\"hud-controls-title\">Upload Replay Files</div>\n            <FileListInput />\n          </div>\n        </div>\n        <RenderDisplay />        \n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const ExternalLink: React.FC<React.HTMLProps<HTMLAnchorElement>> = (props) => {\n  return (\n    <a target=\"_blank\" rel=\"noopener noreferrer\" {...props}>\n      {props.children}\n    </a>\n  );\n};\n","import styled from \"@emotion/styled\";\n\nexport const Header = styled.h1`\n  text-transform: uppercase;\n  font-weight: 800;\n  font-size: 5.5rem;\n  margin: 2rem;\n  padding-bottom: 1rem;\n  position: relative;\n  text-align: center;\n\n  &::before {\n    z-index: -1;\n    content: \"\";\n    display: block;\n    background-image: linear-gradient(to right, transparent, rgba(255, 255, 255, 0.2), transparent);\n    height: 0.1rem;\n    position: absolute;\n    width: 80%;\n    margin-left: 50%;\n    transform: translateX(-50%);\n    bottom: 0;\n  }\n`;\n","/** @jsx jsx */\nimport { css, Global, jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport { ExternalLink as A } from \"components/ExternalLink\";\nimport { Header } from \"components/Header\";\nimport { Options } from \"containers/Options\";\nimport { useParam } from \"lib/hooks\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { RenderDisplay } from \"../containers/RenderDisplay\";\nimport poweredByImage from \"../styles/images/powered-by.png\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport interface RenderViewProps {\n  showSlippiLogo?: boolean;\n}\n\nexport const RenderView: React.FC<RenderViewProps> = ({ showSlippiLogo }) => {\n  const [primaryColor] = useParam(\"primaryColor\");\n  const [secondaryColor] = useParam(\"secondaryColor\");\n  return (\n    <div\n      css={css`\n        width: 1700px;\n        height: 980px;\n        margin: 0 auto;\n      `}\n    >\n      <Container>\n        <Link to=\"/\" title=\"Home\">\n          <Header>Post Match Stats</Header>\n        </Link>\n        <div\n          css={css`\n            margin-bottom: ${showSlippiLogo ? \"2rem\" : \"4rem\"};\n            & > a {\n              display: ${showSlippiLogo ? \"block\" : \"none\"};\n            }\n          `}\n        >\n          <A href=\"https://slippi.gg\">\n            <img\n              alt=\"Powered by Slippi\"\n              title=\"Open Slippi.gg homepage\"\n              src={poweredByImage}\n              css={css`\n                max-height: 5rem;\n              `}\n            />\n          </A>\n        </div>\n        <RenderDisplay />\n        <Settings />\n      </Container>\n    </div>\n  );\n};\n\nconst Settings: React.FC = () => {\n  return (\n    <React.Fragment>\n      <Global\n        styles={css`\n          body:hover .settings {\n            opacity: 1;\n          }\n          .settings {\n            opacity: 0;\n            transition: opacity 0.2s ease-in-out;\n          }\n        `}\n      />\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { hot } from \"react-hot-loader/root\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { RandomView } from \"views/RandomView\";\n\nimport { AppProvider } from \"./store\";\nimport { MainView } from \"./views/MainView\";\nimport { RenderView } from \"./views/RenderView\";\n\nconst App: React.FC = () => {\n  return (\n    <AppProvider>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route exact path=\"/\" component={MainView} />\n        <Route path=\"/render\" component={RenderView} />\n        <Route path=\"/random\" component={RandomView} />\n      </Router>\n    </AppProvider>\n  );\n};\n\nexport default hot(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./index.scss\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import moment from \"moment\";\n\nexport function convertFrameCountToDurationString(frameCount: number): string {\n  // Enforce positive numbers only\n  const totalFrames = Math.max(frameCount, 0);\n  const duration = moment.duration(totalFrames / 60, \"seconds\");\n  return moment.utc(duration.as(\"milliseconds\")).format(\"m:ss\");\n}\n\nexport function reorder(list: any[], startIndex: number, endIndex: number) {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n}\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { hasOpacity } from \"styles/opacity\";\n\nexport const ControlsButton = styled.button`\n  width: 250px;\n  background-color: green;\n  padding: 10px;\n  margin: auto;\n  &:hover:enabled {\n    background-color: darkgreen;\n  }\n  &:active:enabled {\n    background-color: lightgreen;\n  }\n`;\n\nexport const ResetButton = styled.button`\n  width: 250px;\n  background-color: grey;\n  padding: 10px;\n  margin: auto;\n  &:hover:enabled {\n    background-color: darkgrey;\n  }\n  &:active:enabled {\n    background-color: lightgrey;\n  }\n`;\n\nexport const SecondaryButton: React.FC<Record<string, any>> = (props) => {\n  const { align, children, ...rest } = props;\n  const alignment = align || \"center\";\n  return (\n    <div\n      css={css`\n        user-select: none;\n        text-align: ${alignment};\n      `}\n    >\n      <span\n        css={css`\n          display: inline-block;\n          font-size: 1.4rem;\n          cursor: pointer;\n          margin: 0.5rem 0;\n          padding: 0 0.5rem;\n          ${hasOpacity(0.5)}\n          &:hover {\n            text-decoration: underline;\n          }\n        `}\n        {...rest}\n      >\n        {children}\n      </span>\n    </div>\n  );\n};\n","import { FrameEntryType, FramesType, GameEndType, GameStartType, MetadataType, StatsType } from \"@slippi/slippi-js\";\n\nexport enum Stat {\n  OPENINGS_PER_KILL = \"opk\",\n  DAMAGE_PER_OPENING = \"dpo\",\n  NEUTRAL_WINS = \"nw\",\n  KILL_MOVES = \"mckm\",\n  NEUTRAL_OPENER_MOVES = \"mcno\",\n  INPUTS_PER_MINUTE = \"ipm\",\n  AVG_KILL_PERCENT = \"akp\",\n  AVG_TIME_TO_KILL = \"attk\",\n  DAMAGE_DONE = \"tdd\",\n  EARLY_KILLS = \"ek\",\n  LATE_DEATHS = \"ld\",\n  SELF_DESTRUCTS = \"sd\",\n  HIGH_DAMAGE_PUNISHES = \"hdp\",\n  HIGH_DAMAGE_COMBOS = \"hdc\",\n\n  // Custom\n  FIRST_BLOOD = \"fb\",\n  L_CANCEL = \"lc\",\n}\n\nexport interface GameDetails {\n  filePath: string;\n  settings: GameStartType;\n  frames: FramesType;\n  stats: StatsType;\n  metadata: MetadataType;\n  latestFrame: FrameEntryType | null;\n  gameEnd: GameEndType | null;\n}\n\nexport interface StatCalculationResult {\n  result: any;\n  simple: any;\n}\n\nexport type StatCalculation = (games: GameDetails[], playerIndex: number) => StatCalculationResult;\n\nexport interface StatDefinition {\n  name: string;\n  type: string;\n  betterDirection?: string;\n  recommendedRounding?: number;\n  calculate: StatCalculation;\n}\n","import { FrameEntryType } from \"@slippi/slippi-js\";\n\n/**\n * Given the last frame of the game, determine the winner first based on stock count\n * then based on remaining percent.\n * If percents are tied, return the player with the lower port number by default.\n *\n * @returns the player index of the winner\n */\nexport const findWinner = (lastFrame: FrameEntryType): number => {\n  const postFrameEntries = Object.keys(lastFrame.players).map((i: any) => (lastFrame.players[i] as any).post);\n  const winnerPostFrame = postFrameEntries.reduce((a, b) => {\n    // Determine winner based on stock count\n    if (a.stocksRemaining > b.stocksRemaining) {\n      return a;\n    }\n    if (a.stocksRemaining < b.stocksRemaining) {\n      return b;\n    }\n\n    // Stocks are the same so determine winner based off remaining percent\n    if (a.percent < b.percent) {\n      return a;\n    }\n    if (a.percent > b.percent) {\n      return b;\n    }\n\n    // Just return a by default\n    return a;\n  });\n\n  return winnerPostFrame.playerIndex;\n};\n"],"sourceRoot":""}